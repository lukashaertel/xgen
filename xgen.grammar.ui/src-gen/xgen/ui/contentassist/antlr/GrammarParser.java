/*
* generated by Xtext
*/
package xgen.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import xgen.services.GrammarGrammarAccess;

public class GrammarParser extends AbstractContentAssistParser {
	
	@Inject
	private GrammarGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected xgen.ui.contentassist.antlr.internal.InternalGrammarParser createParser() {
		xgen.ui.contentassist.antlr.internal.InternalGrammarParser result = new xgen.ui.contentassist.antlr.internal.InternalGrammarParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConstruct2Access().getAlternatives(), "rule__Construct2__Alternatives");
					put(grammarAccess.getConstruct4Access().getAlternatives(), "rule__Construct4__Alternatives");
					put(grammarAccess.getGrammarAccess().getGroup(), "rule__Grammar__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getConstruct0Access().getGroup(), "rule__Construct0__Group__0");
					put(grammarAccess.getConstruct0Access().getGroup_1(), "rule__Construct0__Group_1__0");
					put(grammarAccess.getConstruct0Access().getGroup_1_3(), "rule__Construct0__Group_1_3__0");
					put(grammarAccess.getConstruct1Access().getGroup(), "rule__Construct1__Group__0");
					put(grammarAccess.getConstruct1Access().getGroup_1(), "rule__Construct1__Group_1__0");
					put(grammarAccess.getConstruct2Access().getGroup_0(), "rule__Construct2__Group_0__0");
					put(grammarAccess.getConstruct3Access().getGroup(), "rule__Construct3__Group__0");
					put(grammarAccess.getConstruct3Access().getGroup_1(), "rule__Construct3__Group_1__0");
					put(grammarAccess.getConstruct3Access().getGroup_1_3(), "rule__Construct3__Group_1_3__0");
					put(grammarAccess.getConstruct4Access().getGroup_0(), "rule__Construct4__Group_0__0");
					put(grammarAccess.getConstruct4Access().getGroup_1(), "rule__Construct4__Group_1__0");
					put(grammarAccess.getConstruct4Access().getGroup_2(), "rule__Construct4__Group_2__0");
					put(grammarAccess.getConstruct4Access().getGroup_3(), "rule__Construct4__Group_3__0");
					put(grammarAccess.getConstruct4Access().getGroup_4(), "rule__Construct4__Group_4__0");
					put(grammarAccess.getGrammarAccess().getDefinitionsAssignment_1(), "rule__Grammar__DefinitionsAssignment_1");
					put(grammarAccess.getDefinitionAccess().getLexicalAssignment_1(), "rule__Definition__LexicalAssignment_1");
					put(grammarAccess.getDefinitionAccess().getLhsAssignment_2(), "rule__Definition__LhsAssignment_2");
					put(grammarAccess.getDefinitionAccess().getRhsAssignment_4(), "rule__Definition__RhsAssignment_4");
					put(grammarAccess.getConstruct0Access().getOperandsAssignment_1_2(), "rule__Construct0__OperandsAssignment_1_2");
					put(grammarAccess.getConstruct0Access().getOperandsAssignment_1_3_1(), "rule__Construct0__OperandsAssignment_1_3_1");
					put(grammarAccess.getConstruct1Access().getOperandsAssignment_1_1(), "rule__Construct1__OperandsAssignment_1_1");
					put(grammarAccess.getConstruct1Access().getOperandsAssignment_1_2(), "rule__Construct1__OperandsAssignment_1_2");
					put(grammarAccess.getConstruct2Access().getOperandAssignment_0_2(), "rule__Construct2__OperandAssignment_0_2");
					put(grammarAccess.getConstruct3Access().getMinAssignment_1_2(), "rule__Construct3__MinAssignment_1_2");
					put(grammarAccess.getConstruct3Access().getUpperBoundedAssignment_1_3_0(), "rule__Construct3__UpperBoundedAssignment_1_3_0");
					put(grammarAccess.getConstruct3Access().getMaxAssignment_1_3_1(), "rule__Construct3__MaxAssignment_1_3_1");
					put(grammarAccess.getConstruct4Access().getTargetAssignment_0_1(), "rule__Construct4__TargetAssignment_0_1");
					put(grammarAccess.getConstruct4Access().getMinAssignment_1_1(), "rule__Construct4__MinAssignment_1_1");
					put(grammarAccess.getConstruct4Access().getMaxAssignment_1_2(), "rule__Construct4__MaxAssignment_1_2");
					put(grammarAccess.getConstruct4Access().getValueAssignment_2_1(), "rule__Construct4__ValueAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			xgen.ui.contentassist.antlr.internal.InternalGrammarParser typedParser = (xgen.ui.contentassist.antlr.internal.InternalGrammarParser) parser;
			typedParser.entryRuleGrammar();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GrammarGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GrammarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
