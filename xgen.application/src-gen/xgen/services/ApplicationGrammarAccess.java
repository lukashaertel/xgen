/*
* generated by Xtext
*/
package xgen.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import xgen.services.GrammarGrammarAccess;

@Singleton
public class ApplicationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cApplicationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cApplicationsApplyParserRuleCall_0 = (RuleCall)cApplicationsAssignment.eContents().get(0);
		
		//Model:
		//	applications+=Apply*;
		public ParserRule getRule() { return rule; }

		//applications+=Apply*
		public Assignment getApplicationsAssignment() { return cApplicationsAssignment; }

		//Apply
		public RuleCall getApplicationsApplyParserRuleCall_0() { return cApplicationsApplyParserRuleCall_0; }
	}

	public class ApplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Apply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplicationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetGrammarCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetGrammarQIDParserRuleCall_1_0_1 = (RuleCall)cTargetGrammarCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinINTTerminalRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxINTTerminalRuleCall_5_0 = (RuleCall)cMaxAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Assignment cCallReplacementsAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cCallReplacementsCallReplacementParserRuleCall_7_1_0_0 = (RuleCall)cCallReplacementsAssignment_7_1_0.eContents().get(0);
		private final Assignment cRuleReplacementsAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cRuleReplacementsRuleReplacementParserRuleCall_7_1_1_0 = (RuleCall)cRuleReplacementsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Apply:
		//	{Application} target=[xt::Grammar|QID] "(" min=INT ".." max=INT ")" ("{" (callReplacements+=CallReplacement |
		//	ruleReplacements+=RuleReplacement)* "}")?;
		public ParserRule getRule() { return rule; }

		//{Application} target=[xt::Grammar|QID] "(" min=INT ".." max=INT ")" ("{" (callReplacements+=CallReplacement |
		//ruleReplacements+=RuleReplacement)* "}")?
		public Group getGroup() { return cGroup; }

		//{Application}
		public Action getApplicationAction_0() { return cApplicationAction_0; }

		//target=[xt::Grammar|QID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[xt::Grammar|QID]
		public CrossReference getTargetGrammarCrossReference_1_0() { return cTargetGrammarCrossReference_1_0; }

		//QID
		public RuleCall getTargetGrammarQIDParserRuleCall_1_0_1() { return cTargetGrammarQIDParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//min=INT
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }

		//INT
		public RuleCall getMinINTTerminalRuleCall_3_0() { return cMinINTTerminalRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }

		//max=INT
		public Assignment getMaxAssignment_5() { return cMaxAssignment_5; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_5_0() { return cMaxINTTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//("{" (callReplacements+=CallReplacement | ruleReplacements+=RuleReplacement)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//(callReplacements+=CallReplacement | ruleReplacements+=RuleReplacement)*
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//callReplacements+=CallReplacement
		public Assignment getCallReplacementsAssignment_7_1_0() { return cCallReplacementsAssignment_7_1_0; }

		//CallReplacement
		public RuleCall getCallReplacementsCallReplacementParserRuleCall_7_1_0_0() { return cCallReplacementsCallReplacementParserRuleCall_7_1_0_0; }

		//ruleReplacements+=RuleReplacement
		public Assignment getRuleReplacementsAssignment_7_1_1() { return cRuleReplacementsAssignment_7_1_1; }

		//RuleReplacement
		public RuleCall getRuleReplacementsRuleReplacementParserRuleCall_7_1_1_0() { return cRuleReplacementsRuleReplacementParserRuleCall_7_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
	}

	public class CallReplacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallReplacement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSelectorAbstractRuleCrossReference_1_0 = (CrossReference)cSelectorAssignment_1.eContents().get(0);
		private final RuleCall cSelectorAbstractRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cSelectorAbstractRuleCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPositionedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPositionedSolidusKeyword_2_0_0 = (Keyword)cPositionedAssignment_2_0.eContents().get(0);
		private final Assignment cPositionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPositionINTTerminalRuleCall_2_1_0 = (RuleCall)cPositionAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetAbstractRuleCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetAbstractRuleIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetAbstractRuleCrossReference_4_0.eContents().get(1);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReplacementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReplacementConstruct0ParserRuleCall_6_0 = (RuleCall)cReplacementAssignment_6.eContents().get(0);
		
		//CallReplacement:
		//	"replace" selector=[xt::AbstractRule] (positioned?="/" position=INT)? "in" target=[xt::AbstractRule] "with"
		//	replacement=Construct0;
		public ParserRule getRule() { return rule; }

		//"replace" selector=[xt::AbstractRule] (positioned?="/" position=INT)? "in" target=[xt::AbstractRule] "with"
		//replacement=Construct0
		public Group getGroup() { return cGroup; }

		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }

		//selector=[xt::AbstractRule]
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }

		//[xt::AbstractRule]
		public CrossReference getSelectorAbstractRuleCrossReference_1_0() { return cSelectorAbstractRuleCrossReference_1_0; }

		//ID
		public RuleCall getSelectorAbstractRuleIDTerminalRuleCall_1_0_1() { return cSelectorAbstractRuleIDTerminalRuleCall_1_0_1; }

		//(positioned?="/" position=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//positioned?="/"
		public Assignment getPositionedAssignment_2_0() { return cPositionedAssignment_2_0; }

		//"/"
		public Keyword getPositionedSolidusKeyword_2_0_0() { return cPositionedSolidusKeyword_2_0_0; }

		//position=INT
		public Assignment getPositionAssignment_2_1() { return cPositionAssignment_2_1; }

		//INT
		public RuleCall getPositionINTTerminalRuleCall_2_1_0() { return cPositionINTTerminalRuleCall_2_1_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//target=[xt::AbstractRule]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[xt::AbstractRule]
		public CrossReference getTargetAbstractRuleCrossReference_4_0() { return cTargetAbstractRuleCrossReference_4_0; }

		//ID
		public RuleCall getTargetAbstractRuleIDTerminalRuleCall_4_0_1() { return cTargetAbstractRuleIDTerminalRuleCall_4_0_1; }

		//"with"
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }

		//replacement=Construct0
		public Assignment getReplacementAssignment_6() { return cReplacementAssignment_6; }

		//Construct0
		public RuleCall getReplacementConstruct0ParserRuleCall_6_0() { return cReplacementConstruct0ParserRuleCall_6_0; }
	}

	public class RuleReplacementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleReplacement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetAbstractRuleCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetAbstractRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetAbstractRuleCrossReference_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReplacementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReplacementConstruct0ParserRuleCall_3_0 = (RuleCall)cReplacementAssignment_3.eContents().get(0);
		
		//RuleReplacement:
		//	"replace" target=[xt::AbstractRule] "with" replacement=Construct0;
		public ParserRule getRule() { return rule; }

		//"replace" target=[xt::AbstractRule] "with" replacement=Construct0
		public Group getGroup() { return cGroup; }

		//"replace"
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }

		//target=[xt::AbstractRule]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[xt::AbstractRule]
		public CrossReference getTargetAbstractRuleCrossReference_1_0() { return cTargetAbstractRuleCrossReference_1_0; }

		//ID
		public RuleCall getTargetAbstractRuleIDTerminalRuleCall_1_0_1() { return cTargetAbstractRuleIDTerminalRuleCall_1_0_1; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//replacement=Construct0
		public Assignment getReplacementAssignment_3() { return cReplacementAssignment_3; }

		//Construct0
		public RuleCall getReplacementConstruct0ParserRuleCall_3_0() { return cReplacementConstruct0ParserRuleCall_3_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private ApplyElements pApply;
	private CallReplacementElements pCallReplacement;
	private RuleReplacementElements pRuleReplacement;
	private QIDElements pQID;
	
	private final Grammar grammar;

	private GrammarGrammarAccess gaGrammar;

	@Inject
	public ApplicationGrammarAccess(GrammarProvider grammarProvider,
		GrammarGrammarAccess gaGrammar) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaGrammar = gaGrammar;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xgen.Application".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public GrammarGrammarAccess getGrammarGrammarAccess() {
		return gaGrammar;
	}

	
	//Model:
	//	applications+=Apply*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Apply:
	//	{Application} target=[xt::Grammar|QID] "(" min=INT ".." max=INT ")" ("{" (callReplacements+=CallReplacement |
	//	ruleReplacements+=RuleReplacement)* "}")?;
	public ApplyElements getApplyAccess() {
		return (pApply != null) ? pApply : (pApply = new ApplyElements());
	}
	
	public ParserRule getApplyRule() {
		return getApplyAccess().getRule();
	}

	//CallReplacement:
	//	"replace" selector=[xt::AbstractRule] (positioned?="/" position=INT)? "in" target=[xt::AbstractRule] "with"
	//	replacement=Construct0;
	public CallReplacementElements getCallReplacementAccess() {
		return (pCallReplacement != null) ? pCallReplacement : (pCallReplacement = new CallReplacementElements());
	}
	
	public ParserRule getCallReplacementRule() {
		return getCallReplacementAccess().getRule();
	}

	//RuleReplacement:
	//	"replace" target=[xt::AbstractRule] "with" replacement=Construct0;
	public RuleReplacementElements getRuleReplacementAccess() {
		return (pRuleReplacement != null) ? pRuleReplacement : (pRuleReplacement = new RuleReplacementElements());
	}
	
	public ParserRule getRuleReplacementRule() {
		return getRuleReplacementAccess().getRule();
	}

	//QID:
	//	ID ("." ID)*;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//Grammar:
	//	{Grammar} definitions+=Definition*;
	public GrammarGrammarAccess.GrammarElements getGrammarAccess() {
		return gaGrammar.getGrammarAccess();
	}
	
	public ParserRule getGrammarRule() {
		return getGrammarAccess().getRule();
	}

	//Definition:
	//	{Definition} lexical?="lexical"? name=ID ":" rhs=Construct0 ";";
	public GrammarGrammarAccess.DefinitionElements getDefinitionAccess() {
		return gaGrammar.getDefinitionAccess();
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Construct0 returns Construct:
	//	Construct1 ({Alternative.operands+=current} "|" operands+=Construct1 ("|" operands+=Construct1)*)?;
	public GrammarGrammarAccess.Construct0Elements getConstruct0Access() {
		return gaGrammar.getConstruct0Access();
	}
	
	public ParserRule getConstruct0Rule() {
		return getConstruct0Access().getRule();
	}

	//Construct1 returns Construct:
	//	Construct2 ({Sequence.operands+=current} operands+=Construct2 operands+=Construct2*)?;
	public GrammarGrammarAccess.Construct1Elements getConstruct1Access() {
		return gaGrammar.getConstruct1Access();
	}
	
	public ParserRule getConstruct1Rule() {
		return getConstruct1Access().getRule();
	}

	//Construct2 returns Construct:
	//	{Not} "!" operand=Construct2 | {Until} "->" operand=Construct2 | Construct3;
	public GrammarGrammarAccess.Construct2Elements getConstruct2Access() {
		return gaGrammar.getConstruct2Access();
	}
	
	public ParserRule getConstruct2Rule() {
		return getConstruct2Access().getRule();
	}

	//Construct3 returns Construct:
	//	Construct4 ({Multiplicity.operand=current} "{" min=INT (upperBounded?="," max=INT)? "}")*;
	public GrammarGrammarAccess.Construct3Elements getConstruct3Access() {
		return gaGrammar.getConstruct3Access();
	}
	
	public ParserRule getConstruct3Rule() {
		return getConstruct3Access().getRule();
	}

	//Construct4 returns Construct:
	//	{Range} min=CHAR ".." max=CHAR | {Keyword} value=STRING | {Any} "." | {Reference} target=ID | "(" Construct0 ")";
	public GrammarGrammarAccess.Construct4Elements getConstruct4Access() {
		return gaGrammar.getConstruct4Access();
	}
	
	public ParserRule getConstruct4Rule() {
		return getConstruct4Access().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaGrammar.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaGrammar.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaGrammar.getSTRINGRule();
	} 

	//terminal CHAR returns ecore::EChar:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'")) "\'";
	public TerminalRule getCHARRule() {
		return gaGrammar.getCHARRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaGrammar.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaGrammar.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaGrammar.getWSRule();
	} 
}
